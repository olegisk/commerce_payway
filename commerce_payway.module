<?php

/**
 * @file
 * Implements Payway API payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_payway_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/authnet-aim-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_payway_api_capture_form', 3, 5),
    'access callback' => 'commerce_payway_api_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_payway.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for Authorize.Net
 *   AIM credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_payway_aim_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Authorize.Net AIM or isn't
  // awaiting capture.
  if ($transaction->payment_method != 'payway_api' || strtoupper($transaction->remote_status) != 'AUTH_ONLY') {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payway_commerce_payment_method_info() {
  $payment_methods = array();
  $path = base_path() . drupal_get_path('module', 'commerce_payway');
  $payment_methods['payway_api'] = array(
    'base' => 'commerce_payway_api',
    'title' => t('Westpac PayWay API - Credit Card'),
    'short_title' => t('PayWay API'),
    'display_title' => t('Credit card') . '<div class="commerce-paypal-icons"><span class="label">Includes:</span><img src="'. $path .'/images/visa.gif" alt="Visa" title="Visa" class="commerce-paypal-icon" /> <img src="'. $path .'/images/mastercard.gif" alt="Mastercard" title="Mastercard" class="commerce-paypal-icon" /></div>',
    'description' => t('Integrates Wespac Payway API for card not present CC transactions.'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payway_api_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'merchant' => '',
    'username' => '',
    'password' => '',
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'log' => array('request' => '0', 'response' => '0'),
  );

  $form['merchant'] = array(
    '#type' => 'textfield',
    '#title' => t('PayWay Merchant ID'),
    '#description' => t('Your PayWay Merchant ID. Use "TEST" for testing.'),
    '#default_value' => $settings['merchant'],
    '#required' => TRUE,
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('PayWay Username'),
    '#description' => t('The "Login Name" of the PayWay User you wish to process payments with.'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('PayWay Password'),
    '#description' => t('The password of the PayWay User you wish to process payments with.'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );

  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_payway_api_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $form = commerce_payment_credit_card_form(array('code' => ''));
  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_payway_api_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_payway_api_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $requestParameters = array();

  // Credit card details

  $cardExpiryMonth = (strlen($pane_values['credit_card']['exp_month']) == 1) ? str_pad($pane_values['credit_card']['exp_month'], 2, '0', STR_PAD_LEFT) : $pane_values['credit_card']['exp_month'];
  $cardExpiryYear = substr((string) $pane_values['credit_card']['exp_year'], 2);
  
  // Amount to charge
  $orderAmountCents = number_format((float)$charge['amount'], 0, '.', '');

  $transaction = commerce_payment_transaction_new('payway_api', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  commerce_payment_transaction_save($transaction);

  $requestParameters['customer.customerReferenceNumber'] = $order->uid;
  $requestParameters['customer.orderNumber'] = $transaction->transaction_id;
  $requestParameters['card.PAN'] = $pane_values['credit_card']['number'];
  if (isset($pane_values['credit_card']['code'])) {
    $requestParameters['card.CVN'] = $pane_values['credit_card']['code'];
  }
  $requestParameters['card.expiryYear'] = $cardExpiryYear;
  $requestParameters['card.expiryMonth'] = $cardExpiryMonth;
  $requestParameters['card.currency'] = 'AUD';
  $requestParameters['order.amount'] = $orderAmountCents;

  // Submit the request to Authorize.Net.
  $response = commerce_payway_api_request($payment_method, $requestParameters);

  // Check we got a response
  if (empty($response)) {
    // Supply some values which can be logged
    $summaryCode = -1;
    $responseCode = -1;
    $description = 'No response from Gateway.';
  } else {
    // Get the required parameters from the response
    $summaryCode = $response['response.summaryCode'];
    $responseCode = $response['response.responseCode'];
    $description = $response['response.text'];
    $receiptNo = $response['response.receiptNo'];
  }

  // Successful requests will have a summary code = 0

  if ($summaryCode == 0) {
    $message = t('Credit card charged: !amount', array('!amount' => $charge['amount']))
              .'<br />'. t('PayWay receipt no.: @receipt', array('@receipt' => $receiptNo));
  }
  // All failed requests will have a summary code != 0
  else {
    $message = t('Credit card declined: !amount', array('!amount' => $charge['amount']));
  }
  $message .= '<br />'. t('Gateway said: @responseCode - @response', array('@responseCode' => $responseCode, '@response' => $description));

  // Prepare a transaction object to log the API response.
  $transaction->remote_id = $receiptNo;
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($summaryCode != 0) {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($payment_method['settings']['txn_type']) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $responseCode;

  $transaction->message = $message; //implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($summaryCode != 0) {
    drupal_set_message(t('We received an error while processing your payment, please enter you information again or try a different card.'), 'error');
    return FALSE;
  }
}

/**
 * Submits an Payway API request to Payway.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_payway_api_request($payment_method, $requestParameters = array()) {
  // Initialise the PayWay API
  $init = "";

  $init  = 'logDirectory='. variable_get('commerce_payway_log_dir', '/files/logs');
  $ca_path = variable_get('commerce_payway_ca_file_path', '');
  if (!(empty($ca_path))) {
    $init .= '&caFile=' . $ca_path;
  }
  $cert_path = variable_get('commerce_payway_cert_file_path', '');
  if (!(empty($cert_path))) {
    $init .= '&certificateFile=' . $cert_path;
  }

  module_load_include('inc', 'commerce_payway', '/includes/Qvalent_PayWayAPI');
//  require_once drupal_get_path('module', 'commerce_payway') .'/includes/Qvalent_PayWayAPI.php';
  $paywayAPI = new Qvalent_PayWayAPI();
  $paywayAPI->initialise($init);
    
  // Load the Ubercart order
//  $order = uc_order_load($order_id);
  
  // Request type
  $orderECI = "SSL";
  $orderType = "capture";
  
  // PayWay details
  $customerUsername = $payment_method['settings']['username'];
  $customerPassword = $payment_method['settings']['password'];
  $customerMerchant = $payment_method['settings']['merchant'];
  
  // Unique order ID
//  $orderNumber = $order_id;
  
  // PayWay parameters
//  $requestParameters = array();
  $requestParameters['order.type'] = $orderType;
  $requestParameters['customer.username'] = $customerUsername;
  $requestParameters['customer.password'] = $customerPassword;
  $requestParameters['customer.merchant'] = $customerMerchant;
  $requestParameters['order.ECI'] = $orderECI;
  
  // Build and send the request
  $request = $paywayAPI->formatRequestParameters($requestParameters);
  // Parse the response
  $response = $paywayAPI->processCreditCard($request);
  $responseParameters = $paywayAPI->parseResponseParameters($response);

  if (!empty($payment_method['settings']['log']['request'])) {
    // prevent the watchdog from saving the credit card.
    watchdog('payway', 'REQUEST: ' . print_r(preg_replace('/card.PAN=(\d+)&/i', 'card.PAN=XXXX&', $request), TRUE));
  }
  if (!empty($payment_method['settings']['log']['response'])) {
    watchdog('payway', 'RESPONSE: ' . print_r($response, TRUE));
  }

  return $responseParameters;
}

